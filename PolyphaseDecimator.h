#ifndef POLYPHASEDECIMATOR_H
#define POLYPHASEDECIMATOR_H

#include <string>
#include <fstream>
#include <iostream>
#include <stdexcept>

#include "cmpy_v6_0_bitacc_cmodel.h"
#include "fir_compiler_v7_2_bitacc_cmodel.h"
#include "debug.h"

using namespace std;

/**
 * @brief дециматор на основе полифазного фильтра
*/
class PolyphaseDecimator
{
public:
	/**
	 * @brief конструктор
	 * @param decim_factor коэффициент децимации
	 * @param coeff_file файл с коэффициентами фильтра
	 * @param num_coeff количество коэффициентов фильтра
	*/
	PolyphaseDecimator(unsigned decim_factor, const string& coeff_file, unsigned num_coeff);

	~PolyphaseDecimator();

	/**
	 * @brief обработать очередной отсчет
	 * @param in входной отсчет
	 * @return true - требуется еще отсчет, false - отсчет не требуется
	 * вызов next возможен только когда process вернет false
	*/
	bool process(const xip_complex& in);

	/**
	 * @brief получить децимированный отсчет
	 * @param out 
	 * вызов next возможен только когда process вернет false
	*/
	int next(xip_complex& out);

private:
	/**
	 * @brief инициализация библиотеки xip fir и загрузка коэффициентов
	 * @return
	*/
	int init_xip_fir(const string& coeff_file, unsigned num_coeff);

	/**
	 * @brief загрузка коэффициентов фильтра в память
	 * @param coeff_file файл с коэффициентами фильтра
	 * @param num_coeff количество коэффициентов фильтра
	 * @return 
	*/
	int load_coeff(const string& coeff_file, unsigned num_coeff);

	/**
	 * @brief деинициализация библиотеки xip fir и освобождение памяти
	 * @return
	*/
	int destroy_xip_fir();

	unsigned m_decimFactor;				// коэффициент децимации
	unsigned m_numCoeff;				// количество коэффициентов фильтра
	double* m_firCoeff = nullptr;		// набор коэффициентов фильтра
	unsigned m_decimCounter = 0;		// кольцевой счетчик входных отсчетов [0, m_decimFactor-1]

	// паременные для работы с xip fir
	xip_fir_v7_2* xip_fir;				// полифазный фильтр
	xip_fir_v7_2_config xip_fir_cnfg;	// конфиг фильтра
	xip_array_real* xip_fir_in;			// 3-D массив, содержащий текущий отсчет для обработки
	xip_array_real* xip_fir_out;		// 3-D массив, содержащий результат обработки
};

#endif // POLYPHASEDECIMATOR_H